<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deck_store = instance_find(obj_deck_store,0);
atbat_store = instance_find(store_atbat, 0);
visible = false;

margin_left = 20;
padding_left = 0;
margin_top = 20;
padding_top = 0;
line_height = 1.25;


atbat_store_fields = ds_list_create();
ds_list_add(atbat_store_fields, "currentPitch");
ds_list_add(atbat_store_fields, "pitchSequence");
ds_list_add(atbat_store_fields, "currentSelectedCard");
ds_list_add(atbat_store_fields, "validDropObjects");
ds_list_add(atbat_store_fields, "playerTurn");


deck_store_fields = ds_list_create();
ds_list_add(deck_store_fields, BATTER);
ds_list_add(deck_store_fields, PITCHER);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var leftMargin = margin_left + padding_left; 
var topMargin = margin_top + padding_top;
var cursorX = leftMargin;
var cursorY = topMargin;
var key = ""
var str = "";
var delim = ":";



draw_set_colour(c_aqua);
draw_set_alpha(0.85);
draw_rectangle(0,0, room_width * 0.5, room_height, false);
draw_set_colour(c_black);
draw_set_alpha(1.0);

var ii, _val;

for( var i=0; i &lt; ds_list_size(atbat_store_fields); i++) {
   cursorX = leftMargin;
   
   key = atbat_store_fields[| i];
   str = key + delim;
   draw_text(cursorX, cursorY, str);
   cursorX += (string_width(str) + margin_left + padding_left);
   
   str = "";
   
   console("...key = " + key);
   
   if( atbat_store.data[? key] == noone) {
     console("     ..got here 1");
     str += "noone"
   } else {
     _val = atbat_store.data[? key];
     switch(key) {
       case 'currentSelectedCard':
             str += string(_val.value);
          break;
       case 'pitchSequence':
          _val = atbat_store.data[? key];
          for( ii = 0; ii &lt; ds_list_size(_val) ; ii++) {
             str += string(_val[| ii]) + ",";
          }
          break;
       case 'playerTurn':
          str += atbat_store.data[? key];
          break;
       case 'validDropObjects':
          for( ii=0; ii &lt; ds_list_size(_val); ii++) {
             str += string(_val[| ii]) + ",";
          }
          break;
       case 'currentPitch':           
       default:
         str += string(_val);
     }   
   }
   
   /*
   if(ds_exists(atbat_store.data[? key], ds_type_list )) {
        console("     ..got here 2");
      str += scr_list_to_string(atbat_store.data[? key]);
   } else if( object_get_name(atbat_store.data[? key].object_index) == "obj_pitcher_card" ) {
        console("     ..got here 3");
      str += string(atbat_store.data[? key].value);
   } else {
        console("     ..got here 4");
      str += string(atbat_store.data[? key])
   }
   */
   
   draw_text( cursorX, cursorY, str );

   cursorY += (line_height * string_height(str));   

}


cursorY += 50;

for( var i=0; i &lt; ds_list_size(deck_store_fields); i++) {
   cursorX = leftMargin;
   
   key = deck_store_fields[| i];
   str = key + delim;
   draw_text(cursorX, cursorY, str);
   cursorX += (string_width(str) + margin_left + padding_left);
   
   str = "";
   
   console("...key = " + key);
   
   if( deck_store.data[? key] == noone) {
     str += "noone"
   } else {
     _val = deck_store.data[? key];
     
     switch(key) {
       case BATTER:
       case PITCHER:
          for( var ii = 0; ii &lt; ds_list_size(_val) ; ii++) {
             str += string(_val[| ii]) + ",";
          }
          
          break;
       default:
         str += string(_val);
     }   
   }
   
   draw_text( cursorX, cursorY, str );
   cursorY += (line_height * string_height(str));   

}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
