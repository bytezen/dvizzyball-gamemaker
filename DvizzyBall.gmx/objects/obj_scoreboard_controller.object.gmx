<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///setup control of scoreboard view objects
store = instance_find(store_inning,0);

props = ds_map_create();
props[? "balls"] = store.data[? "balls"];
props[? "strikes"] = store.data[? "strikes"];
props[? "outs"] = store.data[? "outs"];


props[? "inningNumber"] = store.data[? "inningNumber"];
props[? "homeScore"] = global.gameStatus[? "homeScore"];
props[? "guestScore"] = global.gameStatus[? "guestScore"];

//TODO: controller handles placement of objects? (makes sense)
//view_balls = instance_create(208,128,obj_sb_status_label);



view_ball_count = instance_create(x,y,obj_atbat_count);
with( view_ball_count ) {
      label_index = LBL_BALLS;
}

view_strike_count = instance_create(x,y+32,obj_atbat_count);
with( view_strike_count ) {
      label_index = LBL_STRIKES;
}

view_out_count = instance_create(x+55,y+12,obj_atbat_count);
with( view_out_count ) {
      label_index = LBL_OUTS;
}

view_home_score = noone;
view_guest_score = noone;
view_inning_number = noone;


var i=0;
repeat( instance_number(obj_sb_team_label) ) {
    with( instance_find( obj_sb_team_label, i) ) {
          switch(image_index) {
             case LBL_HOME:
                  other.view_home_score = id;
                  break;
             case LBL_GUEST:
                  other.view_guest_score = id;
                  break;
             case LBL_INNING:
                  other.view_inning_number= id;
                  break;                                    
          }
    }
    i++;
}

view_inning_indicator = obj_indicator;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///testing trigger of a ball
var store = instance_find(store_inning,0);
store.data[? LBL_BALLS]++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>30</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///update properties from store

props[? "balls"] = store.data[? "balls"];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///push values to view components

//TODO: implement a property value change logic
// to only update the properties that have changed

//update props
props[? "balls"] = store.data[? "balls"];
props[? "strikes"] = store.data[? "strikes"];
props[? "outs"] = store.data[? "outs"];
props[? "inningHalf"] = store.data[? "inningHalf"];

props[? "inningNumber"] = global.gameStatus[? "inningNumber"];
props[? "homeScore" ] = global.gameStatus[? "homeScore"];
props[? "guestScore"] = global.gameStatus[? "guestScore"];

//update view values
with(view_ball_count) {
  value = other.props[? "balls"] ;
}

with(view_strike_count) {
 value = other.props[? "strikes"];
}

with(view_out_count) {
 value = other.props[? "outs"];
}

with( view_inning_number ) {
 value = other.props[? "inningNumber"];
}

with( view_home_score ) {
 value = other.props[? "homeScore" ];
}

with (view_guest_score ) {
 value = other.props[? "guestScore" ];
}

with (view_inning_indicator) {
 if(other.props[? "inningHalf"] == INNING_HALF_TOP) {
  value = 0;
 } else {
 value = 1;
 }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
